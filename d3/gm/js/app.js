// Generated by CoffeeScript 1.3.1
var ChartableObject, District, School, createCircles, dataset, districts, drillIntoDistrict, fadeInCircles, h, padding, rScale, reset, selectedDistrict, svg, trans, url, w, xAxis, xScale, yAxis, yScale,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

ChartableObject = (function() {

  ChartableObject.name = 'ChartableObject';

  function ChartableObject() {}

  ChartableObject.subjectKey = "mathData";

  ChartableObject.prototype.growth = function() {
    return this[ChartableObject.subjectKey].growthPercentile;
  };

  ChartableObject.prototype.proficiency = function() {
    return this[ChartableObject.subjectKey].percentProficient;
  };

  ChartableObject.prototype.count = function() {
    return this[ChartableObject.subjectKey].growthPercentileCount;
  };

  ChartableObject.prototype.clone = function(obj, generic) {
    var key, newInstance;
    if (generic == null) {
      generic = false;
    }
    if (!(obj != null) || typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Date) {
      return new Date(obj.getTime());
    }
    if (generic) {
      newInstance = new obj.constructor();
    } else {
      newInstance = new this.constructor();
    }
    for (key in obj) {
      newInstance[key] = this.clone(obj[key], true);
    }
    return newInstance;
  };

  return ChartableObject;

})();

District = (function(_super) {

  __extends(District, _super);

  District.name = 'District';

  function District() {
    District.__super__.constructor.apply(this, arguments);
  }

  return District;

})(ChartableObject);

School = (function(_super) {

  __extends(School, _super);

  School.name = 'School';

  function School() {
    School.__super__.constructor.apply(this, arguments);
  }

  return School;

})(ChartableObject);

dataset = [];

selectedDistrict = null;

districts = dataset;

w = 800;

h = 600;

padding = 30;

svg = d3.select("body").append("svg").attr("width", w).attr("height", h);

xScale = d3.scale.linear().domain([0, 100]).range([padding, w - padding * 2.5]);

xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(5);

yScale = d3.scale.linear().domain([0, 100]).range([h - padding, padding]);

yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(5);

rScale = d3.scale.linear().domain([0, 5000]).range([6, 25]).clamp(true);

svg.append("g").attr("class", "axis").attr("transform", "translate(0, " + (h - padding) + ")").call(xAxis);

svg.append("g").attr("class", "axis").attr("transform", "translate(" + padding + ", 0)").call(yAxis);

createCircles = function() {
  var circles;
  return circles = svg.selectAll("circle").data(dataset).enter().append("circle").attr("opacity", 0.0001).attr("cx", function(d) {
    return xScale(d.growth());
  }).attr("cy", function(d) {
    return yScale(d.proficiency());
  }).attr("r", function(d) {
    return rScale(d.count());
  }).attr("class", "bubble").on("click", drillIntoDistrict);
};

fadeInCircles = function() {
  return svg.selectAll("circle").transition().duration(500).attr("opacity", 0.9);
};

drillIntoDistrict = function(district) {
  var circles;
  selectedDistrict = district;
  dataset = district.schools;
  circles = svg.selectAll("circle").data(dataset, function(d) {
    return d.name;
  });
  circles.enter().append("circle").attr("cx", function(d) {
    return xScale(district.growth());
  }).attr("cy", function(d) {
    return yScale(district.proficiency());
  }).attr("r", function(d) {
    return rScale(district.count());
  }).attr("class", "bubble").transition().duration(500).delay(500).attr("cx", function(d) {
    return xScale(d.growth());
  }).attr("cy", function(d) {
    return yScale(d.proficiency());
  }).attr("r", function(d) {
    return rScale(d.count());
  }).each("end", function() {
    return svg.on("click", reset);
  });
  return circles.exit().transition().duration(500).attr("r", 0).attr("opacity", 0).remove();
};

reset = function() {
  var circles;
  svg.on("click", null);
  circles = svg.selectAll("circle").data(districts, function(d) {
    return d.name;
  });
  circles.exit().transition().duration(500).attr("cx", function(d) {
    return xScale(selectedDistrict.growth());
  }).attr("cy", function(d) {
    return yScale(selectedDistrict.proficiency());
  }).attr("r", function(d) {
    return rScale(selectedDistrict.count());
  }).remove();
  return circles.enter().append("circle").attr("cx", function(d) {
    return xScale(d.growth());
  }).attr("cy", function(d) {
    return yScale(d.proficiency());
  }).attr("r", function(d) {
    return rScale(d.count());
  }).attr("opacity", function(d) {
    return 0.0001;
  }).attr("class", "bubble").on("click", drillIntoDistrict).transition().duration(0).delay(500).attr("opacity", function(d) {
    if (d === selectedDistrict) {
      return .9;
    } else {
      return 0.0001;
    }
  }).transition().duration(500).delay(500).attr("opacity", .9);
};

url = "http://localhost:8080/growth_model/dataForType/2009/District/0470/schools.json";

url = "js/currentYearDistricts.json";

d3.json(url, function(json) {
  var d, o, s, _i, _len;
  dataset = districts = (function() {
    var _i, _len, _ref, _results;
    _ref = json.districtList;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      o = _ref[_i];
      _results.push(new District().clone(o));
    }
    return _results;
  })();
  for (_i = 0, _len = districts.length; _i < _len; _i++) {
    d = districts[_i];
    d.schools = (function() {
      var _j, _len1, _ref, _results;
      _ref = d.schools;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        s = _ref[_j];
        _results.push(new School().clone(s));
      }
      return _results;
    })();
  }
  createCircles();
  return fadeInCircles();
});

d3.select("#mathBtn").on("click", function() {
  ChartableObject.subjectKey = "mathData";
  return trans();
});

d3.select("#readingBtn").on("click", function() {
  ChartableObject.subjectKey = "readingData";
  return trans();
});

d3.select("#writingBtn").on("click", function() {
  ChartableObject.subjectKey = "writingData";
  return trans();
});

trans = function() {
  return svg.selectAll("circle").transition().duration(500).attr("cx", function(d) {
    return xScale(d.growth());
  }).attr("cy", function(d) {
    return yScale(d.proficiency());
  }).attr("r", function(d) {
    return rScale(d.count());
  });
};
